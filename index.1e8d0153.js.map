{"mappings":"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","sources":["<anon>","src/index.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireff1f\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireff1f\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $aSLsq = parcelRequire(\"aSLsq\");\nclass $35da740d59af89ba$var$Calculator {\n    static add(firstValue, secondValue) {\n        return firstValue + secondValue;\n    }\n    static subtract(firstValue, secondValue) {\n        return firstValue - secondValue;\n    }\n    static multiply(firstValue, secondValue) {\n        return firstValue * secondValue;\n    }\n    static divide(firstValue, secondValue) {\n        if (secondValue === 0) return NaN;\n        return firstValue / secondValue;\n    }\n    static operate(firstValue, secondValue, operation) {\n        if (typeof firstValue !== \"number\" || typeof secondValue !== \"number\") return \"Both values must be numbers.\";\n        switch(operation){\n            case \"+\":\n                return $35da740d59af89ba$var$Calculator.add(firstValue, secondValue);\n            case \"-\":\n                return $35da740d59af89ba$var$Calculator.subtract(firstValue, secondValue);\n            case \"\\xd7\":\n                return $35da740d59af89ba$var$Calculator.multiply(firstValue, secondValue);\n            case \"\\xf7\":\n                return $35da740d59af89ba$var$Calculator.divide(firstValue, secondValue);\n            default:\n                return firstValue;\n        }\n    }\n    static generateCalculator() {\n        const app = document.querySelector(\".app\");\n        const container = document.createElement(\"div\");\n        container.className = \"calculator\";\n        app.appendChild(container);\n        const displayContainer = document.createElement(\"div\");\n        displayContainer.className = \"display-container\";\n        container.appendChild(displayContainer);\n        const displayValue = document.createElement(\"div\");\n        displayValue.className = \"display-value\";\n        displayValue.textContent = \"0\";\n        displayContainer.appendChild(displayValue);\n        const buttonContainer = document.createElement(\"div\");\n        buttonContainer.className = \"button-container\";\n        container.appendChild(buttonContainer);\n        let firstValue = 0;\n        let secondValue = 0;\n        let operation;\n        let isCalculated = false;\n        const onNumberClick = (currentValue, targetValue)=>{\n            if (currentValue !== 0) {\n                if (!(currentValue.includes(\".\") && targetValue === \".\")) currentValue += targetValue;\n            }\n            if (currentValue === 0 && targetValue === \".\") currentValue = \"0.\";\n            if (currentValue === 0) currentValue = targetValue;\n            displayValue.textContent = currentValue;\n            return currentValue;\n        };\n        const clearCalculator = ()=>{\n            firstValue = 0;\n            secondValue = 0;\n            operation = undefined;\n            isCalculated = false;\n            displayValue.textContent = 0;\n        };\n        const getCalculation = (firstValue, secondValue, operation)=>{\n            if (firstValue && secondValue && operation) {\n                let results = this.operate(Number(firstValue), Number(secondValue), operation);\n                displayValue.textContent = results;\n                return results;\n            }\n        };\n        for (const rows of (0, $aSLsq.buttons)){\n            const row = document.createElement(\"div\");\n            row.className = \"calculator-button-row\";\n            for (const config of rows){\n                const button = document.createElement(\"div\");\n                const buttonClass = `calculator-button ${config.type} ${config.fill}`;\n                button.textContent = config.name;\n                button.className = buttonClass;\n                button.addEventListener(\"mousedown\", ()=>{\n                    if (config.type === (0, $aSLsq.buttonType).equate) {\n                        firstValue = getCalculation(firstValue, secondValue, operation);\n                        isCalculated = true;\n                    }\n                    if (isCalculated && config.type === (0, $aSLsq.buttonType).number) clearCalculator();\n                    if (config.type === (0, $aSLsq.buttonType).clear) clearCalculator();\n                    if (config.type === (0, $aSLsq.buttonType).operation) {\n                        if (isCalculated) {\n                            secondValue = 0;\n                            isCalculated = false;\n                        }\n                        if (operation && secondValue) {\n                            firstValue = getCalculation(firstValue, secondValue, operation);\n                            secondValue = 0;\n                            displayValue.textContent = firstValue;\n                        }\n                        operation = config.name;\n                    }\n                    if (!operation && config.type === (0, $aSLsq.buttonType).number) firstValue = onNumberClick(firstValue, config.name);\n                    if (operation && config.type === (0, $aSLsq.buttonType).number) secondValue = onNumberClick(secondValue, config.name);\n                    if (config.type === (0, $aSLsq.buttonType).sign) firstValue = getCalculation(firstValue, -1, \"\\xd7\");\n                    if (config.type === (0, $aSLsq.buttonType).percentage) firstValue = getCalculation(firstValue, 100, \"\\xf7\");\n                    button.className = `${buttonClass} click`;\n                });\n                button.addEventListener(\"mouseup\", ()=>button.className = buttonClass);\n                row.appendChild(button);\n            }\n            buttonContainer.appendChild(row);\n        }\n    }\n}\n$35da740d59af89ba$var$Calculator.generateCalculator();\n\n\n//# sourceMappingURL=index.1e8d0153.js.map\n","import { buttons, buttonType } from \"./index.data\";\n\nclass Calculator {\n  static add(firstValue, secondValue) {\n    return firstValue + secondValue;\n  }\n\n  static subtract(firstValue, secondValue) {\n    return firstValue - secondValue;\n  }\n\n  static multiply(firstValue, secondValue) {\n    return firstValue * secondValue;\n  }\n\n  static divide(firstValue, secondValue) {\n    if (secondValue === 0) {\n      return NaN;\n    }\n    return firstValue / secondValue;\n  }\n\n  static operate(firstValue, secondValue, operation) {\n    if (typeof firstValue !== \"number\" || typeof secondValue !== \"number\") {\n      return \"Both values must be numbers.\";\n    }\n\n    switch (operation) {\n      case \"+\":\n        return Calculator.add(firstValue, secondValue);\n      case \"-\":\n        return Calculator.subtract(firstValue, secondValue);\n      case \"×\":\n        return Calculator.multiply(firstValue, secondValue);\n      case \"÷\":\n        return Calculator.divide(firstValue, secondValue);\n      default:\n        return firstValue;\n    }\n  }\n\n  static generateCalculator() {\n    const app = document.querySelector(\".app\");\n\n    const container = document.createElement(\"div\");\n    container.className = \"calculator\";\n    app.appendChild(container);\n\n    const displayContainer = document.createElement(\"div\");\n    displayContainer.className = \"display-container\";\n    container.appendChild(displayContainer);\n\n    const displayValue = document.createElement(\"div\");\n    displayValue.className = \"display-value\";\n    displayValue.textContent = \"0\";\n    displayContainer.appendChild(displayValue);\n\n    const buttonContainer = document.createElement(\"div\");\n    buttonContainer.className = \"button-container\";\n    container.appendChild(buttonContainer);\n\n    let firstValue = 0;\n    let secondValue = 0;\n    let operation;\n    let isCalculated = false;\n\n    const onNumberClick = (currentValue, targetValue) => {\n      if (currentValue !== 0) {\n        if (!(currentValue.includes(\".\") && targetValue === \".\")) {\n          currentValue += targetValue;\n        }\n      }\n\n      if (currentValue === 0 && targetValue === \".\") {\n        currentValue = \"0.\";\n      }\n\n      if (currentValue === 0) {\n        currentValue = targetValue;\n      }\n\n      displayValue.textContent = currentValue;\n\n      return currentValue;\n    };\n\n    const clearCalculator = () => {\n      firstValue = 0;\n      secondValue = 0;\n      operation = undefined;\n      isCalculated = false;\n      displayValue.textContent = 0;\n    };\n\n    const getCalculation = (firstValue, secondValue, operation) => {\n      if (firstValue && secondValue && operation) {\n        let results = this.operate(Number(firstValue), Number(secondValue), operation);\n        displayValue.textContent = results;\n\n        return results;\n      }\n    };\n\n    for (const rows of buttons) {\n      const row = document.createElement(\"div\");\n      row.className = \"calculator-button-row\";\n\n      for (const config of rows) {\n        const button = document.createElement(\"div\");\n\n        const buttonClass = `calculator-button ${config.type} ${config.fill}`;\n        button.textContent = config.name;\n        button.className = buttonClass;\n\n        button.addEventListener(\"mousedown\", () => {\n          if (config.type === buttonType.equate) {\n            firstValue = getCalculation(firstValue, secondValue, operation);\n            isCalculated = true;\n          }\n\n          if (isCalculated && config.type === buttonType.number) {\n            clearCalculator();\n          }\n\n          if (config.type === buttonType.clear) {\n            clearCalculator();\n          }\n\n          if (config.type === buttonType.operation) {\n            if (isCalculated) {\n              secondValue = 0;\n              isCalculated = false;\n            }\n\n            if (operation && secondValue) {\n              firstValue = getCalculation(firstValue, secondValue, operation);\n              secondValue = 0;\n\n              displayValue.textContent = firstValue;\n            }\n\n            operation = config.name;\n          }\n\n          if (!operation && config.type === buttonType.number) {\n            firstValue = onNumberClick(firstValue, config.name);\n          }\n\n          if (operation && config.type === buttonType.number) {\n            secondValue = onNumberClick(secondValue, config.name);\n          }\n\n          if (config.type === buttonType.sign) {\n            firstValue = getCalculation(firstValue, -1, \"×\");\n          }\n\n          if (config.type === buttonType.percentage) {\n            firstValue = getCalculation(firstValue, 100, \"÷\");\n          }\n\n          button.className = `${buttonClass} click`;\n        });\n\n        button.addEventListener(\"mouseup\", () => (button.className = buttonClass));\n\n        row.appendChild(button);\n      }\n      buttonContainer.appendChild(row);\n    }\n  }\n}\n\nCalculator.generateCalculator();\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$aSLsq","$35da740d59af89ba$var$Calculator","add","firstValue","secondValue","subtract","multiply","divide","NaN","operate","operation","generateCalculator","app","document","querySelector","container","createElement","className","appendChild","displayContainer","displayValue","textContent","buttonContainer","isCalculated","onNumberClick","currentValue","targetValue","includes","clearCalculator","undefined","getCalculation","results","Number","rows","buttons","row","config","button","buttonClass","type","fill","name","addEventListener","buttonType","equate","number","clear","sign","percentage"],"version":3,"file":"index.1e8d0153.js.map"}